// Code generated by counterfeiter. DO NOT EDIT.
package v6fakes

import (
	"context"
	"sync"

	"code.cloudfoundry.org/cli/actor/sharedaction"
	"code.cloudfoundry.org/cli/actor/v2action"
	v6 "code.cloudfoundry.org/cli/command/v6"
)

type FakeLogsActor struct {
	GetRecentLogsForApplicationByNameAndSpaceStub        func(string, string, sharedaction.LogCacheClient) ([]sharedaction.LogMessage, v2action.Warnings, error)
	getRecentLogsForApplicationByNameAndSpaceMutex       sync.RWMutex
	getRecentLogsForApplicationByNameAndSpaceArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 sharedaction.LogCacheClient
	}
	getRecentLogsForApplicationByNameAndSpaceReturns struct {
		result1 []sharedaction.LogMessage
		result2 v2action.Warnings
		result3 error
	}
	getRecentLogsForApplicationByNameAndSpaceReturnsOnCall map[int]struct {
		result1 []sharedaction.LogMessage
		result2 v2action.Warnings
		result3 error
	}
	GetStreamingLogsForApplicationByNameAndSpaceStub        func(string, string, sharedaction.LogCacheClient) (<-chan sharedaction.LogMessage, <-chan error, context.CancelFunc, v2action.Warnings, error)
	getStreamingLogsForApplicationByNameAndSpaceMutex       sync.RWMutex
	getStreamingLogsForApplicationByNameAndSpaceArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 sharedaction.LogCacheClient
	}
	getStreamingLogsForApplicationByNameAndSpaceReturns struct {
		result1 <-chan sharedaction.LogMessage
		result2 <-chan error
		result3 context.CancelFunc
		result4 v2action.Warnings
		result5 error
	}
	getStreamingLogsForApplicationByNameAndSpaceReturnsOnCall map[int]struct {
		result1 <-chan sharedaction.LogMessage
		result2 <-chan error
		result3 context.CancelFunc
		result4 v2action.Warnings
		result5 error
	}
	ScheduleTokenRefreshStub        func() (chan bool, error)
	scheduleTokenRefreshMutex       sync.RWMutex
	scheduleTokenRefreshArgsForCall []struct {
	}
	scheduleTokenRefreshReturns struct {
		result1 chan bool
		result2 error
	}
	scheduleTokenRefreshReturnsOnCall map[int]struct {
		result1 chan bool
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeLogsActor) GetRecentLogsForApplicationByNameAndSpace(arg1 string, arg2 string, arg3 sharedaction.LogCacheClient) ([]sharedaction.LogMessage, v2action.Warnings, error) {
	fake.getRecentLogsForApplicationByNameAndSpaceMutex.Lock()
	ret, specificReturn := fake.getRecentLogsForApplicationByNameAndSpaceReturnsOnCall[len(fake.getRecentLogsForApplicationByNameAndSpaceArgsForCall)]
	fake.getRecentLogsForApplicationByNameAndSpaceArgsForCall = append(fake.getRecentLogsForApplicationByNameAndSpaceArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 sharedaction.LogCacheClient
	}{arg1, arg2, arg3})
	fake.recordInvocation("GetRecentLogsForApplicationByNameAndSpace", []interface{}{arg1, arg2, arg3})
	fake.getRecentLogsForApplicationByNameAndSpaceMutex.Unlock()
	if fake.GetRecentLogsForApplicationByNameAndSpaceStub != nil {
		return fake.GetRecentLogsForApplicationByNameAndSpaceStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	fakeReturns := fake.getRecentLogsForApplicationByNameAndSpaceReturns
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeLogsActor) GetRecentLogsForApplicationByNameAndSpaceCallCount() int {
	fake.getRecentLogsForApplicationByNameAndSpaceMutex.RLock()
	defer fake.getRecentLogsForApplicationByNameAndSpaceMutex.RUnlock()
	return len(fake.getRecentLogsForApplicationByNameAndSpaceArgsForCall)
}

func (fake *FakeLogsActor) GetRecentLogsForApplicationByNameAndSpaceCalls(stub func(string, string, sharedaction.LogCacheClient) ([]sharedaction.LogMessage, v2action.Warnings, error)) {
	fake.getRecentLogsForApplicationByNameAndSpaceMutex.Lock()
	defer fake.getRecentLogsForApplicationByNameAndSpaceMutex.Unlock()
	fake.GetRecentLogsForApplicationByNameAndSpaceStub = stub
}

func (fake *FakeLogsActor) GetRecentLogsForApplicationByNameAndSpaceArgsForCall(i int) (string, string, sharedaction.LogCacheClient) {
	fake.getRecentLogsForApplicationByNameAndSpaceMutex.RLock()
	defer fake.getRecentLogsForApplicationByNameAndSpaceMutex.RUnlock()
	argsForCall := fake.getRecentLogsForApplicationByNameAndSpaceArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeLogsActor) GetRecentLogsForApplicationByNameAndSpaceReturns(result1 []sharedaction.LogMessage, result2 v2action.Warnings, result3 error) {
	fake.getRecentLogsForApplicationByNameAndSpaceMutex.Lock()
	defer fake.getRecentLogsForApplicationByNameAndSpaceMutex.Unlock()
	fake.GetRecentLogsForApplicationByNameAndSpaceStub = nil
	fake.getRecentLogsForApplicationByNameAndSpaceReturns = struct {
		result1 []sharedaction.LogMessage
		result2 v2action.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeLogsActor) GetRecentLogsForApplicationByNameAndSpaceReturnsOnCall(i int, result1 []sharedaction.LogMessage, result2 v2action.Warnings, result3 error) {
	fake.getRecentLogsForApplicationByNameAndSpaceMutex.Lock()
	defer fake.getRecentLogsForApplicationByNameAndSpaceMutex.Unlock()
	fake.GetRecentLogsForApplicationByNameAndSpaceStub = nil
	if fake.getRecentLogsForApplicationByNameAndSpaceReturnsOnCall == nil {
		fake.getRecentLogsForApplicationByNameAndSpaceReturnsOnCall = make(map[int]struct {
			result1 []sharedaction.LogMessage
			result2 v2action.Warnings
			result3 error
		})
	}
	fake.getRecentLogsForApplicationByNameAndSpaceReturnsOnCall[i] = struct {
		result1 []sharedaction.LogMessage
		result2 v2action.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeLogsActor) GetStreamingLogsForApplicationByNameAndSpace(arg1 string, arg2 string, arg3 sharedaction.LogCacheClient) (<-chan sharedaction.LogMessage, <-chan error, context.CancelFunc, v2action.Warnings, error) {
	fake.getStreamingLogsForApplicationByNameAndSpaceMutex.Lock()
	ret, specificReturn := fake.getStreamingLogsForApplicationByNameAndSpaceReturnsOnCall[len(fake.getStreamingLogsForApplicationByNameAndSpaceArgsForCall)]
	fake.getStreamingLogsForApplicationByNameAndSpaceArgsForCall = append(fake.getStreamingLogsForApplicationByNameAndSpaceArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 sharedaction.LogCacheClient
	}{arg1, arg2, arg3})
	fake.recordInvocation("GetStreamingLogsForApplicationByNameAndSpace", []interface{}{arg1, arg2, arg3})
	fake.getStreamingLogsForApplicationByNameAndSpaceMutex.Unlock()
	if fake.GetStreamingLogsForApplicationByNameAndSpaceStub != nil {
		return fake.GetStreamingLogsForApplicationByNameAndSpaceStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3, ret.result4, ret.result5
	}
	fakeReturns := fake.getStreamingLogsForApplicationByNameAndSpaceReturns
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3, fakeReturns.result4, fakeReturns.result5
}

func (fake *FakeLogsActor) GetStreamingLogsForApplicationByNameAndSpaceCallCount() int {
	fake.getStreamingLogsForApplicationByNameAndSpaceMutex.RLock()
	defer fake.getStreamingLogsForApplicationByNameAndSpaceMutex.RUnlock()
	return len(fake.getStreamingLogsForApplicationByNameAndSpaceArgsForCall)
}

func (fake *FakeLogsActor) GetStreamingLogsForApplicationByNameAndSpaceCalls(stub func(string, string, sharedaction.LogCacheClient) (<-chan sharedaction.LogMessage, <-chan error, context.CancelFunc, v2action.Warnings, error)) {
	fake.getStreamingLogsForApplicationByNameAndSpaceMutex.Lock()
	defer fake.getStreamingLogsForApplicationByNameAndSpaceMutex.Unlock()
	fake.GetStreamingLogsForApplicationByNameAndSpaceStub = stub
}

func (fake *FakeLogsActor) GetStreamingLogsForApplicationByNameAndSpaceArgsForCall(i int) (string, string, sharedaction.LogCacheClient) {
	fake.getStreamingLogsForApplicationByNameAndSpaceMutex.RLock()
	defer fake.getStreamingLogsForApplicationByNameAndSpaceMutex.RUnlock()
	argsForCall := fake.getStreamingLogsForApplicationByNameAndSpaceArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeLogsActor) GetStreamingLogsForApplicationByNameAndSpaceReturns(result1 <-chan sharedaction.LogMessage, result2 <-chan error, result3 context.CancelFunc, result4 v2action.Warnings, result5 error) {
	fake.getStreamingLogsForApplicationByNameAndSpaceMutex.Lock()
	defer fake.getStreamingLogsForApplicationByNameAndSpaceMutex.Unlock()
	fake.GetStreamingLogsForApplicationByNameAndSpaceStub = nil
	fake.getStreamingLogsForApplicationByNameAndSpaceReturns = struct {
		result1 <-chan sharedaction.LogMessage
		result2 <-chan error
		result3 context.CancelFunc
		result4 v2action.Warnings
		result5 error
	}{result1, result2, result3, result4, result5}
}

func (fake *FakeLogsActor) GetStreamingLogsForApplicationByNameAndSpaceReturnsOnCall(i int, result1 <-chan sharedaction.LogMessage, result2 <-chan error, result3 context.CancelFunc, result4 v2action.Warnings, result5 error) {
	fake.getStreamingLogsForApplicationByNameAndSpaceMutex.Lock()
	defer fake.getStreamingLogsForApplicationByNameAndSpaceMutex.Unlock()
	fake.GetStreamingLogsForApplicationByNameAndSpaceStub = nil
	if fake.getStreamingLogsForApplicationByNameAndSpaceReturnsOnCall == nil {
		fake.getStreamingLogsForApplicationByNameAndSpaceReturnsOnCall = make(map[int]struct {
			result1 <-chan sharedaction.LogMessage
			result2 <-chan error
			result3 context.CancelFunc
			result4 v2action.Warnings
			result5 error
		})
	}
	fake.getStreamingLogsForApplicationByNameAndSpaceReturnsOnCall[i] = struct {
		result1 <-chan sharedaction.LogMessage
		result2 <-chan error
		result3 context.CancelFunc
		result4 v2action.Warnings
		result5 error
	}{result1, result2, result3, result4, result5}
}

func (fake *FakeLogsActor) ScheduleTokenRefresh() (chan bool, error) {
	fake.scheduleTokenRefreshMutex.Lock()
	ret, specificReturn := fake.scheduleTokenRefreshReturnsOnCall[len(fake.scheduleTokenRefreshArgsForCall)]
	fake.scheduleTokenRefreshArgsForCall = append(fake.scheduleTokenRefreshArgsForCall, struct {
	}{})
	fake.recordInvocation("ScheduleTokenRefresh", []interface{}{})
	fake.scheduleTokenRefreshMutex.Unlock()
	if fake.ScheduleTokenRefreshStub != nil {
		return fake.ScheduleTokenRefreshStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.scheduleTokenRefreshReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeLogsActor) ScheduleTokenRefreshCallCount() int {
	fake.scheduleTokenRefreshMutex.RLock()
	defer fake.scheduleTokenRefreshMutex.RUnlock()
	return len(fake.scheduleTokenRefreshArgsForCall)
}

func (fake *FakeLogsActor) ScheduleTokenRefreshCalls(stub func() (chan bool, error)) {
	fake.scheduleTokenRefreshMutex.Lock()
	defer fake.scheduleTokenRefreshMutex.Unlock()
	fake.ScheduleTokenRefreshStub = stub
}

func (fake *FakeLogsActor) ScheduleTokenRefreshReturns(result1 chan bool, result2 error) {
	fake.scheduleTokenRefreshMutex.Lock()
	defer fake.scheduleTokenRefreshMutex.Unlock()
	fake.ScheduleTokenRefreshStub = nil
	fake.scheduleTokenRefreshReturns = struct {
		result1 chan bool
		result2 error
	}{result1, result2}
}

func (fake *FakeLogsActor) ScheduleTokenRefreshReturnsOnCall(i int, result1 chan bool, result2 error) {
	fake.scheduleTokenRefreshMutex.Lock()
	defer fake.scheduleTokenRefreshMutex.Unlock()
	fake.ScheduleTokenRefreshStub = nil
	if fake.scheduleTokenRefreshReturnsOnCall == nil {
		fake.scheduleTokenRefreshReturnsOnCall = make(map[int]struct {
			result1 chan bool
			result2 error
		})
	}
	fake.scheduleTokenRefreshReturnsOnCall[i] = struct {
		result1 chan bool
		result2 error
	}{result1, result2}
}

func (fake *FakeLogsActor) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getRecentLogsForApplicationByNameAndSpaceMutex.RLock()
	defer fake.getRecentLogsForApplicationByNameAndSpaceMutex.RUnlock()
	fake.getStreamingLogsForApplicationByNameAndSpaceMutex.RLock()
	defer fake.getStreamingLogsForApplicationByNameAndSpaceMutex.RUnlock()
	fake.scheduleTokenRefreshMutex.RLock()
	defer fake.scheduleTokenRefreshMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeLogsActor) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ v6.LogsActor = new(FakeLogsActor)
